// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ebookdownloader.ico
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ebookdownloaderIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9c\x67\x68\x54\x4d\x17\xc7\x6f\xec\x5d\xb1\xc4\x06\x1a\x5d\x1b\x22\x58\xb0\x80\x35\xc6\x86\x1d\x15\x05\x57\x11\x45\xb1\x2b\x16\x44\x41\xd1\xd8\xb0\xaf\x15\x59\x45\x44\x5d\xb1\xa0\x60\xd7\x0f\x36\x5c\x2b\x28\x58\x13\x42\x12\xf2\x21\x81\xf4\xb2\x49\x48\x2f\xe7\xe5\x3f\xef\x33\x87\x7b\x77\xb3\x7b\xef\x26\xcf\xb3\x7e\xc8\xfc\x60\x90\x9d\x3b\x73\xe6\xcc\xcc\x99\x53\xf2\x41\x4d\x0b\xd3\xc2\xb4\xc8\x48\xfc\x1b\xa1\x0d\x88\xd2\xb4\x70\x4d\xd3\x06\x68\x9a\x16\xa9\x69\x5a\xb4\xf6\xff\x7e\x41\xa4\xe6\x03\x29\x14\x0a\x85\x42\xa1\x50\x28\x14\x0a\x85\x42\xa1\x50\x28\x14\x0a\x45\x3d\xa4\xaa\xaa\x8a\x3e\x7e\xfc\x48\xbb\x76\xed\xa2\xb9\x73\xe7\x52\xaf\x5e\xbd\xa8\x47\x8f\x1e\x34\x6c\xd8\x30\x5a\xba\x74\x29\x39\x1c\x0e\xfa\xf4\xe9\x13\x95\x94\x94\x18\xe6\x15\x14\x14\x90\xdb\xed\xa6\x77\xef\xde\x51\x7a\x7a\x3a\x55\x57\x57\x53\x6c\x6c\x2c\xed\xdb\xb7\x8f\x26\x4d\x9a\x24\x64\xf4\xeb\xd7\x8f\xec\x76\x3b\x5d\xb9\x72\x85\xf2\xf2\xf2\x2c\xeb\xf3\xf6\xed\x5b\x5a\xb6\x6c\x19\xf5\xee\xdd\x5b\xc8\x99\x3f\x7f\x3e\x39\x9d\x4e\xca\xcd\xcd\x15\x63\xb2\xb2\xb2\xc4\xba\x72\xed\xda\x12\x1f\x1f\x4f\x13\x27\x4e\xa4\x86\x0d\x1b\x92\xa6\x69\x7e\x1b\xbe\x77\xef\xde\x9d\x62\x62\x62\x78\x6e\x5a\x5a\x1a\xb5\x6a\xd5\x4a\x7c\xc7\x39\xad\x58\xb1\x82\x9a\x35\x6b\xe6\x57\x46\xcf\x9e\x3d\xe9\xce\x9d\x3b\x62\x7f\x81\xf6\xbe\x7f\xff\x7e\x6a\xdc\xb8\xb1\x5f\x19\x2e\x97\x8b\xde\xbc\x79\x43\x61\x61\x61\xa2\xef\xe0\xc1\x83\xb5\xda\xfb\xf7\xef\xdf\xa9\x73\xe7\xce\x2c\xbb\x75\xeb\xd6\x62\x1f\xe7\xcf\x9f\x17\x6b\xa0\x9d\x38\x71\x82\xe6\xcc\x99\xc3\xfb\xbc\x76\xed\x9a\x41\xd7\x41\x83\x06\xf9\xe8\xd8\xa9\x53\x27\x9a\x3c\x79\x32\xcd\x9b\x37\x8f\xa6\x4e\x9d\x4a\xed\xdb\xb7\x37\x9c\xe3\xce\x9d\x3b\xa9\xb2\xb2\xb2\x46\x9d\x9e\x3d\x7b\x46\x8d\x1a\x35\xe2\xf1\x6d\xdb\xb6\xa5\x69\xd3\xa6\x09\x59\x23\x46\x8c\x10\x7d\xd8\x37\xe4\xb6\x68\xd1\x42\xfc\x8e\x8a\x8a\x0a\x7a\xef\x1e\x8f\x87\xfa\xf7\xef\xcf\xeb\xcc\x9a\x35\x2b\xa0\x1d\x15\x16\x16\x8a\x73\xde\xb8\x71\xa3\xa1\x7f\xdd\xba\x75\x2c\x63\xfa\xf4\xe9\xf4\xea\xd5\x2b\xaa\xa8\xa8\x30\x8c\x29\x2b\x2b\xa3\xab\x57\xaf\x52\x87\x0e\x1d\x58\xff\x93\x27\x4f\x8a\xf7\xa2\x07\xf3\xc6\x8f\x1f\xcf\xf2\xf0\x16\xa5\xbd\x4b\x52\x52\x52\x68\xdb\xb6\x6d\xd4\xb2\x65\x4b\x1e\xd7\xae\x5d\x3b\x2a\x2f\x2f\x0f\x6a\xff\x17\x2e\x5c\xe0\xf9\x63\xc6\x8c\xa1\xd2\xd2\x52\x4b\xf3\xb2\xb3\xb3\x0d\xbf\x6f\xdc\xb8\xc1\x72\x6e\xde\xbc\x19\x70\xee\x8f\x1f\x3f\xa8\x6b\xd7\xae\x62\x2c\xde\x09\x7c\x87\xf7\xde\xa4\xdd\x87\x87\x87\x8b\xf7\xe5\x8f\x3f\x7f\xfe\xb0\x3d\xa0\x7d\xfb\xf6\xcd\x92\xfe\x00\xe7\x0e\xfb\x91\x73\xf1\x96\x6a\x4b\x42\x42\x02\xeb\xec\x6d\x1b\x35\xf1\xfa\xf5\x6b\xf6\x11\xc3\x87\x0f\xa7\xe2\xe2\x62\xfe\xf6\xfe\xfd\x7b\xd6\x09\xf6\xee\x6d\x1f\xde\x3c\x7a\xf4\x88\xc7\x5f\xbc\x78\xd1\xb2\xce\x45\x45\x45\xc2\x8f\x60\x5e\x97\x2e\x5d\x0c\x3a\x04\x0b\xde\x71\xb7\x6e\xdd\x84\x2c\xc4\x0b\x33\x9d\xe1\x33\x56\xae\x5c\xc9\x7a\xdf\xbf\x7f\x9f\xbf\x3d\x7c\xf8\x90\xfb\x61\xe3\x66\x24\x27\x27\xb3\x0f\x58\xb4\x68\x91\x65\x9d\xf3\xf3\xf3\x85\x2f\xc7\xbc\xa1\x43\x87\xfa\xbc\xd7\x60\x59\xb8\x70\x21\xfb\xcf\xcc\xcc\x4c\xd3\xf1\xbf\x7e\xfd\x62\x1b\x98\x3d\x7b\x36\xc7\x83\xa7\x4f\x9f\xf2\xfe\x77\xec\xd8\x61\x2a\x07\xf3\x06\x0e\x1c\x28\xc6\xdb\x6c\xb6\x80\x71\x45\x8f\x7e\xff\xb8\x33\x7f\xbe\xd8\x2a\x67\xcf\x9e\x65\xbd\x9f\x3f\x7f\x6e\x3a\x1e\xe7\x8d\x75\xe5\x99\x41\x1f\xf0\xe5\xcb\x17\x96\xb3\x61\xc3\x06\x4b\x6b\x23\xe6\x62\x3c\xde\x20\xde\xa2\x15\xe0\xeb\x90\x57\x60\x1e\x7c\xf2\xaa\x55\xab\x68\xf5\xea\xd5\x96\x1b\xee\x46\xff\x66\xe0\x7b\xa4\xde\x07\x0e\x1c\xb0\xa4\xc3\xda\xb5\x6b\x79\x0e\x72\x2b\xfa\xc7\x9e\x1b\x34\x68\xc0\xf1\xc8\xec\x2d\x01\xc4\x15\x29\x07\xb9\x85\x15\x20\x77\xc6\x8c\x19\x01\xf3\x9d\x40\xad\x69\xd3\xa6\x86\xb3\x46\xec\x69\xde\xbc\xb9\xf8\x86\xbc\xcf\x0a\xe7\xce\x9d\x63\x79\x97\x2f\x5f\x16\x7d\xc8\x2f\x65\x4c\x8e\x88\x88\x10\x31\xd7\x0c\xc4\x01\x99\x2f\x20\x16\x5b\xe5\xc8\x91\x23\xbc\x3e\x74\x5e\xb2\x64\x89\x69\x1b\x35\x6a\x14\xcf\x41\x7e\xaa\x07\x39\x24\xfa\x91\x4f\x21\x2f\x36\xe3\xf6\xed\xdb\x2c\xeb\xd8\xb1\x63\xdc\xbf\x7e\xfd\x7a\xee\x47\x6e\x6b\x06\xde\x52\xc7\x8e\x1d\x39\x9e\x58\xb1\x19\xf0\xfb\xf7\x6f\xbe\xb3\x43\x87\x0e\x59\x9a\xf3\xe2\xc5\x0b\xd6\xed\xc9\x93\x27\x86\x6f\xd1\xd1\xd1\xa2\x1f\xf6\xfb\xf9\xf3\x67\x53\x59\xb7\x6e\xdd\x62\x59\x47\x8f\x1e\xe5\x7e\xf8\x00\x19\x4f\x17\x2c\x58\x60\xc9\x37\x21\x3f\xc5\x78\xe4\xa8\x81\x72\x06\x3d\xf0\x95\x72\x1e\x6c\x0d\x31\xd1\x8c\xc7\x8f\x1f\xb3\xce\xc8\xf3\xf4\xe8\xcf\xc6\x4a\x2c\x3e\x7c\xf8\x30\x8f\x3f\x7d\xfa\x34\xf7\x63\xbf\xc8\xfb\x64\xae\x8c\x98\x60\x76\xa7\xc7\x8f\x1f\x67\x59\xd0\xc3\x2a\x88\x43\x6d\xda\xb4\x11\xf3\x36\x6d\xda\x14\xf0\xac\xa1\x03\xea\x43\x99\xbb\xa1\x6e\xd2\x83\xbc\x50\xd6\x50\x83\x07\x0f\xa6\x9f\x3f\x7f\xfa\xd5\x1b\x36\x8b\xfa\x40\xea\xfc\xf2\xe5\x4b\xc3\x77\xd8\xa6\xcc\x95\x91\x2f\xe2\x77\x20\x3e\x7c\xf8\xc0\xb2\x50\x7b\x06\x03\xee\x0a\xf9\x38\x1a\xf2\x37\x7f\x6f\x17\x75\x2d\xea\x1a\xac\x31\x72\xe4\x48\x9f\x7c\x1b\x7b\x42\x2e\x21\xf5\x80\x2d\x6e\xdf\xbe\x9d\x92\x92\x92\x0c\xe7\x80\x33\x3e\x73\xe6\x0c\x9f\x15\x6a\xa3\x9a\xea\x62\xf8\x75\xe9\xd7\x90\xa3\x5d\xbf\x7e\xbd\xc6\x1c\x1d\xf2\xf7\xec\xd9\xc3\xeb\xa2\x56\x0a\x06\xbc\x03\xf9\x76\xd1\x50\xaf\xe3\x37\xec\x08\xfe\x07\xf5\x18\xee\x5d\xd6\x70\xd0\x09\x79\x9a\x37\xd8\x23\x6c\x48\xca\x41\x6e\x8e\x33\xc5\x39\x4c\x98\x30\x41\x7c\xdb\xbc\x79\x33\x8d\x1e\x3d\xda\x50\x6b\xef\xde\xbd\xbb\x46\x3b\xc1\x39\xa1\x46\xd2\x8f\xed\xdb\xb7\x2f\x2d\x5f\xbe\x9c\xb6\x6c\xd9\x42\x6b\xd6\xac\xa1\x71\xe3\xc6\x71\x5d\x2a\x1b\xfc\xaf\xcc\x27\x82\x39\x83\xbb\x77\xef\x72\x6d\xe2\xaf\x21\xd7\x84\xbd\xf8\xcb\xb3\xf4\xb5\x10\xfc\x3b\xee\x10\x75\x8c\x3f\x79\x33\x67\xce\x0c\x18\xe3\xb0\xce\xbd\x7b\xf7\x4c\xf5\x42\x2e\x85\x3c\x52\xfa\x5f\xf8\xd0\x60\xc1\x1d\xa0\xd6\x74\x3a\x9d\xa2\x36\x82\xcd\x49\x1f\x04\x7b\xdf\xba\x75\xab\x78\xf3\x81\x7c\x51\x62\x62\xa2\x4f\xfe\x96\x93\x93\x23\x62\xed\xd8\xb1\x63\x45\xde\x00\x9b\x80\xbe\x0e\x87\xc3\x72\xdd\x81\xf7\x81\x7c\x01\x75\x3e\x6a\x5d\xc8\x47\xcd\x81\x1a\x09\xe7\x83\xfa\x5a\x5f\x0b\xa1\xb6\xfd\x1b\x60\x3f\x7d\xfa\xf4\xe1\x58\x5c\xd7\xba\x22\x18\x32\x32\x32\xd8\x5f\xd8\xed\xf6\x90\xad\xab\x07\xb6\xb1\x78\xf1\x62\xa1\x03\xe2\x4a\x6a\x6a\x6a\xc8\xd6\xc6\x59\x0f\x19\x32\x44\xac\x8d\x3b\xf0\xfe\x5b\x65\xa8\x38\x75\xea\x94\xdf\x1c\xe1\xbf\x04\x67\x0f\x9f\x88\x75\x9b\x34\x69\x42\x71\x71\x71\x21\x5b\x5b\xcf\xd7\xaf\x5f\x79\xff\x7b\xf7\xee\x0d\xe9\xda\xfa\x5a\x08\xfe\xfc\x6f\x00\x1f\x2a\xff\xa6\x8a\x9a\xa0\xae\xb5\x75\x30\xe0\xce\xe5\xdf\x84\xad\xd6\xcf\xff\x36\x88\x59\x53\xa6\x4c\xe1\xbc\x25\xd8\x58\x5c\x17\xe0\x7f\x6d\x36\x1b\xe7\x1f\xa1\xf4\xbf\x7a\xdc\x6e\x37\x5d\xba\x74\x49\x34\x8f\xc7\x13\xb2\x75\xe1\x03\x1e\x3c\x78\x20\xd6\x75\xb9\x5c\x22\x2e\x2a\x14\x0a\x85\x42\xa1\x50\x28\x14\x0a\x85\x42\xa1\x50\xd4\x17\x7c\xff\x47\x00\x45\x7d\xe2\x7f\x01\x00\x00\xff\xff\xdb\x22\xbd\x13\x3e\x42\x00\x00")

func ebookdownloaderIcoBytes() ([]byte, error) {
	return bindataRead(
		_ebookdownloaderIco,
		"ebookdownloader.ico",
	)
}

func ebookdownloaderIco() (*asset, error) {
	bytes, err := ebookdownloaderIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ebookdownloader.ico", size: 16958, mode: os.FileMode(438), modTime: time.Unix(1579784154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ebookdownloader.ico": ebookdownloaderIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ebookdownloader.ico": &bintree{ebookdownloaderIco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
